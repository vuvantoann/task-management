const User = require('../models/user.model')
const md5 = require('md5')

const ForgotPassword = require('../models/forgot-password.model')

const generateHelper = require('../../../helper/generate')
const sendMailHelper = require('../../../helper/sendMail')

//[POST]/api/v1/user/register
module.exports.register = async (req, res) => {
  const email = req.body.email

  const emailExist = await User.findOne({ email: email })

  if (emailExist) {
    res.json({
      code: 400,
      message: 'Email ƒë√£ t·ªìn t·∫°i',
    })
  } else {
    req.body.password = md5(req.body.password)
    const newUser = new User({
      fullName: req.body.fullName,
      email: req.body.email,
      password: req.body.password,
      token: generateHelper.generateRandomString(30),
    })

    await newUser.save()
    const token = newUser.token
    res.cookie('token', token)
    res.json({
      code: 200,
      message: 't·∫°o t√†i kho·∫£n th√†nh c√¥ng',
      token: token,
    })
  }
}

//[POST]/api/v1/user/login
module.exports.login = async (req, res) => {
  const email = req.body.email
  const password = md5(req.body.password)
  const user = await User.findOne({
    email: email,
    deleted: false,
  })
  if (!user) {
    res.json({
      code: 400,
      message: 'Email kh√¥ng t·ªìn t·∫°i',
    })
    return
  }

  if (password != user.password) {
    res.json({
      code: 400,
      message: 'Sai m·∫≠t kh·∫©u',
    })
    return
  }

  if (user.status === 'inactive') {
    res.json({
      code: 400,
      message: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a',
    })
    return
  }

  const token = user.token
  res.cookie('token', token)

  res.json({
    code: 200,
    message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
    token: token,
  })
}

//[POST]/api/v1/password/forgot
module.exports.forgotPassword = async (req, res) => {
  const email = req.body.email

  const user = await User.findOne({
    email: email,
    deleted: false,
  })

  if (!user) {
    res.json({
      code: 400,
      message: 'Email kh√¥ng t·ªìn t·∫°i',
    })
    return
  }

  // n·∫øu c√≥ t·ªìn t·∫°i email th√¨ g·ª≠i m√£ OTP qua cho email

  //l∆∞u th√¥ng tin email v√†o m√£ otp ƒë√£ t·∫°o v√†o mongodb tr∆∞·ªõc
  const otp = generateHelper.generateRandomNumber(8)
  const timeExpire = 5
  const objectForgotPassword = {
    email: email,
    otp: otp,
    expireAt: new Date(Date.now() + timeExpire * 60 * 1000),
  }

  console.log(objectForgotPassword)

  const forgotPassword = new ForgotPassword(objectForgotPassword)
  await forgotPassword.save()

  //G·ª≠i m√£ OTP cho kh√°ch h√†ng

  const subject = 'M√£ OTP x√°c minh l·∫•y l·∫°i m·∫≠t kh·∫©u'
  const html = `
  M√£ OTP ƒë·ªÉ l·∫•y l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n l√† <b>${otp}</b>
  (S·ª≠ d·ª•ng trong ${timeExpire} ph√∫t).<br>
  Vui l√≤ng kh√¥ng chia s·∫ª m√£ OTP n√†y v·ªõi b·∫•t k·ª≥ ai.
`

  sendMailHelper.sendMail(email, subject, html)

  res.json({
    code: 200,
    message: 'ƒê√£ g·ª≠i m√£ otp qua email ',
  })
}

//[POST]/api/v1/password/otp
module.exports.otpPassword = async (req, res) => {
  const otp = String(req.body.otp).trim()
  const email = req.body.email.trim()

  console.log('üîç T√¨m v·ªõi:', { email, otp })

  const result = await ForgotPassword.findOne({ email, otp })

  console.log('‚úÖ K·∫øt qu·∫£:', result)
  if (!result) {
    res.json({
      code: 400,
      message: 'M√£ OTP kh√¥ng h·ª£p l·ªá',
    })
    return
  }
  const user = await User.findOne({
    email: email,
  })

  const token = user.token
  res.cookie('token', token)

  res.json({
    code: 200,
    message: 'X√°c th·ª±c th√†nh c√¥ng',
    token: token,
  })
}

//[POST]/api/v1/password/reset
module.exports.resetPassword = async (req, res) => {
  const password = md5(req.body.password)
  const token = req.cookies.token // l·∫•y token t·ª´ khi ƒë√£ x√°c th·ª±c th√†nh c√¥ng
  //const token = req.body.token // l·∫•y token t·ª´ √¥ng frond end g·ª≠i l√™n

  console.log('üîç T√¨m v·ªõi:', { password, token })

  await User.updateOne(
    {
      token: token,
    },
    {
      password: password,
    }
  )

  res.json({
    code: 200,
    message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
  })
}

//[get]/api/v1/user/detail
module.exports.detail = async (req, res) => {
  res.json({
    code: 200,
    message: 'th√†nh c√¥ng',
    infoUser: req.user,
  })
}

//[get]/api/v1/user/detail
module.exports.list = async (req, res) => {
  const users = await User.find({
    deleted: false,
  }).select('fullName email')
  res.json({
    code: 200,
    message: 'th√†nh c√¥ng',
    users: users,
  })
}
